---
# Source: myrobot-shop/templates/web-service.yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: web
spec:
  to:
    kind: Service
    name: web
---
# Source: myrobot-shop/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: myrobot-shop
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    rule: RunAsAny
  privileged: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  allowedCapabilities:
  - 'NET_ADMIN'
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - secret
  - projected
---
# Source: myrobot-shop/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myrobot-shop
  namespace: myrobot-shop
---
# Source: myrobot-shop/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: myrobot-shop
rules:
- apiGroups:
  - policy
  resourceNames:
  - myrobot-shop
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
# Source: myrobot-shop/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: myrobot-shop
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: myrobot-shop
subjects:
- kind: ServiceAccount
  name: myrobot-shop
  namespace: myrobot-shop
---
# Source: myrobot-shop/templates/cart-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cart
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    service: cart
---
# Source: myrobot-shop/templates/catalogue-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: myrobot-shop
    service: catalogue
  name: catalogue
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    service: catalogue
---
# Source: myrobot-shop/templates/dispatch-service.yaml
# dispatch just listens to a message queue
# it does not expose any ports
apiVersion: v1
kind: Service
metadata:
  name: dispatch
  labels:
    app: myrobot-shop
    service: dispatch
spec:
  clusterIP: None
  ports:
  - name: headless
    port: 55555
    targetPort: 0
  selector:
    service: dispatch
---
# Source: myrobot-shop/templates/mongodb-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: myrobot-shop
    service: mongodb
  name: mongodb
spec:
  ports:
  - name: mongo
    port: 27017
    targetPort: 27017
  selector:
    service: mongodb
---
# Source: myrobot-shop/templates/mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: myrobot-shop
    service: mysql
  name: mysql
spec:
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  selector:
    service: mysql
---
# Source: myrobot-shop/templates/payment-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    app: myrobot-shop
    service: payment
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    service: payment
---
# Source: myrobot-shop/templates/rabbitmq-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: myrobot-shop
    service: rabbitmq
spec:
  ports:
  - name: tcp-amqp
    port: 5672
    targetPort: 5672
  - name: http-management
    port: 15672
    targetPort: 15672
  - name: tcp-epmd
    port: 4369
    targetPort: 4369
  selector:
    service: rabbitmq
---
# Source: myrobot-shop/templates/ratings-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ratings
  labels:
    app: myrobot-shop
    service: ratings
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    service: ratings
---
# Source: myrobot-shop/templates/redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: myrobot-shop
    service: redis
  name: redis
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    service: redis
---
# Source: myrobot-shop/templates/shipping-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: shipping
  labels:
    app: myrobot-shop
    service: shipping
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    service: shipping
---
# Source: myrobot-shop/templates/user-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user
  labels:
    app: myrobot-shop
    service: user
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    service: user
---
# Source: myrobot-shop/templates/web-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: myrobot-shop
    service: web
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    service: web
  
  type: NodePort
---
# Source: myrobot-shop/templates/cart-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart
  labels:
    app: myrobot-shop
    service: cart
spec:
  replicas: 1
  selector:
    matchLabels:
      service: cart
  template:
    metadata:
      labels:
        service: cart
    spec:
      
      containers:
      - name: cart
        image: robotshop/rs-cart:latest
        imagePullPolicy: IfNotPresent
        # agent networking access
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
# Source: myrobot-shop/templates/catalogue-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    app: myrobot-shop
    service: catalogue
spec:
  replicas: 1
  selector:
    matchLabels:
      service: catalogue
  template:
    metadata:
      labels:
        service: catalogue
    spec:
      
      containers:
      - name: catalogue
        image: robotshop/rs-catalogue:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/dispatch-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dispatch
  labels:
    app: myrobot-shop
    service: dispatch
spec:
  replicas: 1
  selector:
    matchLabels:
      service: dispatch
  template:
    metadata:
      labels:
        service: dispatch
    spec:
      
      containers:
      - name: dispatch
        image: robotshop/rs-dispatch:latest
        imagePullPolicy: IfNotPresent
        env:
          # agent networking access
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/mongodb-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app: myrobot-shop
    service: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: mongodb
  template:
    metadata:
      labels:
        service: mongodb
    spec:
      
      containers:
      - name: mongodb
        image: robotshop/rs-mongodb:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/mysql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: myrobot-shop
    service: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      service: mysql
  template:
    metadata:
      labels:
        service: mysql
    spec:
      
      containers:
      - name: mysql
        image: robotshop/rs-mysql-db:latest
        imagePullPolicy: IfNotPresent
        # added for Istio
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        ports:
        - containerPort: 3306
        resources:
          limits:
            cpu: 200m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 700Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/payment-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    app: myrobot-shop
    service: payment
    stage: prod
spec:
  replicas: 1
  selector:
    matchLabels:
      service: payment
      stage: prod
  template:
    metadata:
      labels:
        service: payment
        stage: prod
    spec:
      
      containers:
      - name: payment
        image: robotshop/rs-payment:latest
        imagePullPolicy: IfNotPresent
        # agent networking access
        env:
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/rabbitmq-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: myrobot-shop
    service: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      service: rabbitmq
  template:
    metadata:
      labels:
        service: rabbitmq
    spec:
      
      containers:
      - name: rabbitmq
        image: rabbitmq:3.7-management-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/ratings-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratings
  labels:
    app: myrobot-shop
    service: ratings
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ratings
  template:
    metadata:
      labels:
        service: ratings
    spec:
      
      containers:
      - name: ratings
        image: robotshop/rs-ratings:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
        readinessProbe:
          httpGet:
            path: /_health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 30
          successThreshold: 1
      restartPolicy: Always
---
# Source: myrobot-shop/templates/shipping-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    app: myrobot-shop
    service: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      service: shipping
  template:
    metadata:
      labels:
        service: shipping
    spec:
      
      containers:
      - name: shipping
        image: robotshop/rs-shipping:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        # it's Java it needs lots of memory
        resources:
          limits:
            cpu: 600m
            memory: 6000Mi
          requests:
            cpu: 200m
            memory: 500Mi
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 300
          successThreshold: 1
      restartPolicy: Always
---
# Source: myrobot-shop/templates/user-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    app: myrobot-shop
    service: user
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user
  template:
    metadata:
      labels:
        service: user
    spec:
      
      containers:
      - name: user
        image: robotshop/rs-user:latest
        imagePullPolicy: IfNotPresent
        env:
          # agent networking access
          - name: INSTANA_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    app: myrobot-shop
    service: web
spec:
  replicas: 1
  selector:
    matchLabels:
      service: web
  template:
    metadata:
      labels:
        service: web
    spec:
      
      containers:
      - name: web
        image: robotshop/rs-web:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: INSTANA_EUM_KEY
          value: xxxxxxxxx
        - name: INSTANA_EUM_REPORTING_URL
          value: https://eum-eu-west-1.instana.io        
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
---
# Source: myrobot-shop/templates/redis-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: myrobot-shop
    service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: redis
  serviceName: redis
  template:
    metadata:
      labels:
        service: redis
    spec:
      
      containers:
      - name: redis
        image: redis:4.0.6
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
        volumeMounts:
          - name: data
            mountPath: /mnt/redis
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        
        resources:
          requests:
            storage: 1Gi
