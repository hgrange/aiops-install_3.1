kind: Deployment
apiVersion: apps/v1
metadata:
  name: nikh-model-train-console
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: model-train-console
      app.kubernetes.io/instance: aimanager
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: aio
      helm.sh/chart: ibm-watson-aiops-prod
      release: aimanager
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: aimanager
        release: aimanager
        app.kubernetes.io/component: model-train-console
        app.kubernetes.io/managed-by: Tiller
        icpdsupport/app: model-train-console
        helm.sh/chart: ibm-watson-aiops-prod
        icpdsupport/serviceInstanceId: '1616406726957484'
        app.kubernetes.io/name: aio
        icpdsupport/addOnName: aiops
      annotations:
        cloudpakId: d41251cb161c412180d0e11c5f73ef00
        productVersion: 1.0.1
        productID: 0bbbab06835748b9b47ea8b3c984c169
        cloudpakName: IBM Watson AIOps for IBM Cloud Pak for Data
        cloudpakVersion: 3.0.1
        productChargedContainers: All
        productCloudpakRatio: '1:100'
        productName: ibm-aiops
        productMetric: VIRTUAL_PROCESSOR_CORE
    spec:
      restartPolicy: Always
      initContainers:
        - resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          name: minio-is-ready
          command:
            - /bin/bash
            - '-c'
            - >
              set -e ; # Have script exit in the event of a failed command.


              # connectToMinio

              # Use a check-sleep-check loop to wait for Minio service to be
              available

              connectToMinio() {
                ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
                set +e ; # The connections to minio are allowed to fail.
                echo "Connecting to Minio server: $MINIO_ENDPOINT" ;
                MC_COMMAND="mc config host add myminio $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY";
                $MC_COMMAND ;
                STATUS=$? ;
                until [ $STATUS = 0 ]
                do
                  ATTEMPTS=`expr $ATTEMPTS + 1` ;
                  echo \"Failed attempts: $ATTEMPTS\" ;
                  if [ $ATTEMPTS -gt $LIMIT ]; then
                    exit 1 ;
                  fi ;
                  sleep 2 ; # 1 second intervals between attempts
                  $MC_COMMAND ;
                  STATUS=$? ;
                done ;
                set -e ; # reset `e` as active
                return 0
              }


              # checkBucketExists ($bucket)

              # Check if the bucket exists, by using the exit code of `mc ls`

              checkBucketExists() {
                BUCKET=$1
                CMD=$(/workdir/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
                return $?
              }


              # Connect to MinIO and check if bucket exists

              connectToMinio

              echo "Minio Connection Established"
          env:
            - name: MINIO_ENDPOINT
              value: 'https://aimanager-ibm-minio-svc.aiops.svc.cluster.local:9000'
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-minio-access-secret
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-minio-access-secret
                  key: secretkey
          securityContext:
            capabilities:
              drop:
                - ALL
            privileged: false
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: minio-tls-secret
              mountPath: /workdir/home/.mc/certs/CAs/public.crt
              subPath: tls.cacrt
          terminationMessagePolicy: File
          image: >-
            cp.icr.io/cp/ibm-watson-ai-manager/opencontent-minio-client@sha256:13b243f0073ffd1fe903ea69a7cfe855a8500d10255347297e45d3f1d466b022
      imagePullSecrets:
        - name: ibm-aiops-pull-secret
      schedulerName: default-scheduler
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - linux
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsNonRoot: true
      containers:
        - resources:
            limits:
              cpu: 200m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 1Gi
          readinessProbe:
            exec:
              command:
                - bash
                - '-c'
                - HOME=/home/zeno /opt/health/ready.sh
            initialDelaySeconds: 30
            timeoutSeconds: 25
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: console
          livenessProbe:
            exec:
              command:
                - bash
                - '-c'
                - /opt/health/live.sh
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: KAFKA_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: token
                  key: password
            - name: ES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-elasticsearch-secret
                  key: password
            - name: ES_USER
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-elasticsearch-secret
                  key: username
            - name: ES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-elasticsearch-secret
                  key: username
            - name: DATABASE_URL
              value: 'aimanager-postgres-proxy-svc:5432'
            - name: DATABASE_HOST
              value: aimanager-postgres-proxy-svc
            - name: DATABASE_PORT
              value: '5432'
            - name: DATABASE_USER
              value: stolon
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aimanager-postgres-auth-secret
                  key: pg_su_password
            - name: DATABASE_CACERT
              value: /etc/ssl/certs/postgres-cert.pem
            - name: ES_CACERT_RAW
              valueFrom:
                secretKeyRef:
                  name: aimanager-elastic-cert
                  key: ca.pem
            - name: MINIO_CA_BUNDLE
              valueFrom:
                secretKeyRef:
                  name: aimanager-aio-tls
                  key: tls.cacrt
            - name: MINIO_ID
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-minio-access-secret
                  key: accesskey
            - name: MINIO_KEY
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-minio-access-secret
                  key: secretkey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-minio-access-secret
                  key: secretkey
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aimanager-ibm-minio-access-secret
                  key: accesskey
          securityContext:
            capabilities:
              drop:
                - ALL
            privileged: false
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: kafka-tls-secret
              mountPath: /etc/ssl/certs/es-cert.pem
              subPath: es-cert.pem
            - name: dlaas-tls-secret
              readOnly: true
              mountPath: /home/zeno/.dlaas/
            - name: minio-tls-secret
              readOnly: true
              mountPath: /home/zeno/.minio/
            - name: elasticsearch-tls-secret
              readOnly: true
              mountPath: /home/zeno/.es/
            - name: aiops-tls-volume
              mountPath: /etc/ssl/certs/ca-root-cert.pem
              subPath: tls.crt
            - name: aiops-tls-volume
              mountPath: /etc/ssl/certs/aiops-cert.pem
              subPath: tls.cacrt
            - name: aiops-tls-volume
              mountPath: /etc/ssl/certs/aiops-key.pem
              subPath: tls.key
            - name: aiops-tls-volume
              mountPath: /config/tls.p12
              subPath: tls.p12
            - name: aiops-truststore-volume
              mountPath: /etc/ssl/certs/flink-tls-keystore.key
              subPath: flink-tls-keystore.key
            - name: aiops-truststore-volume
              mountPath: /etc/ssl/certs/flink-tls-ca-truststore.jks
              subPath: flink-tls-ca-truststore.jks
            - name: aiops-truststore-volume
              mountPath: /ca-truststore.jks
              subPath: flink-tls-ca-truststore.jks
          terminationMessagePolicy: File
          envFrom:
            - configMapRef:
                name: aimanager-aio-model-train-console-config
            - configMapRef:
                name: aimanager-aio-component-urls
            - configMapRef:
                name: aimanager-aio-kafka
            - configMapRef:
                name: aimanager-aio-elasticsearch
            - configMapRef:
                name: aimanager-aio-tls
          image: >-
            cp.icr.io/cp/ibm-watson-ai-manager/model-train-console@sha256:5af348fde3884a73b196b9976576b05fd09a555cb4574be538377977fed59480
      volumes:
        - name: kafka-tls-secret
          secret:
            secretName: strimzi-cluster-cluster-ca-cert
            items:
              - key: ca.crt
                path: es-cert.pem
            defaultMode: 420
        - name: kafka-truststore-ca
          secret:
            secretName: kafka-truststore
            defaultMode: 420
        - name: dlaas-tls-secret
          configMap:
            name: aimanager-modeltrain-cert-configmap
            items:
              - key: trainer-ca.crt
                path: ca.crt
            defaultMode: 420
        - name: minio-tls-secret
          secret:
            secretName: aimanager-aio-tls
            items:
              - key: tls.cacrt
                path: tls.cacrt
            defaultMode: 420
        - name: elasticsearch-tls-secret
          secret:
            secretName: aimanager-elastic-cert
            items:
              - key: ca.pem
                path: tls.cacer
            defaultMode: 420
        - name: aiops-tls-volume
          secret:
            secretName: aimanager-aio-tls
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: tls.cacrt
                path: tls.cacrt
              - key: tls.p12
                path: tls.p12
            defaultMode: 420
        - name: aiops-truststore-volume
          secret:
            secretName: aimanager-aio-truststores
            items:
              - key: flink-tls-keystore.key
                path: flink-tls-keystore.key
              - key: flink-tls-ca-truststore.jks
                path: flink-tls-ca-truststore.jks
            defaultMode: 420
      dnsPolicy: ClusterFirst
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 25
  progressDeadlineSeconds: 600
