#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT MODIFY BELOW
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
source ./tools/0_global/99_config-global.sh
source ./00_config-secrets.sh

export APP_NAME=robot-shop
export LOG_TYPE=humio   # humio, elk, splunk, ...
export log_output_path=/dev/null 2>&1

echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Simulate Outage for $APP_NAME"
echo ""
echo "***************************************************************************************************************************************************"

get_kafkacat

#--------------------------------------------------------------------------------------------------------------------------------------------
#  Check Defaults
#--------------------------------------------------------------------------------------------------------------------------------------------

if [[ $APP_NAME == "" ]] ;
then
      echo "‚ö†Ô∏è AppName not defined. Launching this script directly?"
      echo "   Falling back to $DEFAULT_APP_NAME"
      export APP_NAME=$DEFAULT_APP_NAME
fi

if [[ $LOG_TYPE == "" ]] ;
then
      echo "‚ö†Ô∏è Log Type not defined. Launching this script directly?"
      echo "   Falling back to $DEFAULT_LOG_TYPE"
      export LOG_TYPE=$DEFAULT_LOG_TYPE
fi


#--------------------------------------------------------------------------------------------------------------------------------------------
#  Get Credentials
#--------------------------------------------------------------------------------------------------------------------------------------------

echo "***************************************************************************************************************************************************"
echo "  üîê  Getting credentials"
echo "***************************************************************************************************************************************************"
oc project $WAIOPS_NAMESPACE >$log_output_path 2>&1  || true
export LOGS_TOPIC=$(oc get kafkatopics.kafka.strimzi.io -n $WAIOPS_NAMESPACE | grep logs-$LOG_TYPE| awk '{print $1;}')
export KAFKA_PASSWORD=$(oc get secret token -n $WAIOPS_NAMESPACE --template={{.data.password}} | base64 --decode)
export KAFKA_BROKER=$(oc get routes strimzi-cluster-kafka-bootstrap -n $WAIOPS_NAMESPACE -o=jsonpath='{.status.ingress[0].host}{"\n"}'):443
export NOI_PASSWORD=$(oc get secrets | grep omni-secret | awk '{print $1;}' | xargs oc get secret -o jsonpath --template '{.data.OMNIBUS_ROOT_PASSWORD}' | base64 --decode)

export WORKING_DIR_LOGS="./demo/INCIDENT_FILES/$APP_NAME/logs"
export WORKING_DIR_EVENTS="./demo/INCIDENT_FILES/$APP_NAME/events"

case $LOG_TYPE in
  elk) export DATE_FORMAT="+%Y-%m-%dT%H:%M:%S.000Z";;
  humio) export DATE_FORMAT="+%s000";;
  *) export DATE_FORMAT="+%s000";;
esac

echo "      ‚úÖ OK"
echo ""
echo ""



#--------------------------------------------------------------------------------------------------------------------------------------------
#  Check Credentials
#--------------------------------------------------------------------------------------------------------------------------------------------

echo "***************************************************************************************************************************************************"
echo "  üîó  Checking credentials"
echo "***************************************************************************************************************************************************"

if [[ $LOGS_TOPIC == "" ]] ;
then
      echo "‚ùå Please create the $LOG_TYPE Kafka Log Integration. Aborting..."
      exit 1
else
      echo "      ‚úÖ OK - Logs Topic"
fi

if [[ $KAFKA_BROKER == "" ]] ;
then
      echo "‚ùå Make sure that the Strimzi Route got created at install time. Aborting..."
      exit 1
fi

if [[ $NETCOOL_WEBHOOK_GENERIC == "not_configured" ]] || [[ $NETCOOL_WEBHOOK_GENERIC == "" ]];
then
      echo "‚ùå Event Manager Webhook not configured. Aborting..."
      exit 1
else
      echo "      ‚úÖ OK - Event Manager Webhook"
fi

if [[ $NOI_PASSWORD == "" ]] ;
then
      echo "‚ùå Cannot contact Event Manager"
      echo "‚ùå Make sure that Event Manager is running. Aborting..."
      exit 1
else
      echo "      ‚úÖ OK - Event Manager Password"
fi
echo ""
echo ""
echo ""
echo ""


echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "  "
echo "  üîé  Parameter for Incident Simulation for $APP_NAME"
echo "  "
echo "           üóÇ  Topic                       : $LOGS_TOPIC"
echo "           üåè Kafka Broker URL            : $KAFKA_BROKER"
echo "           üîê Kafka Password              : $KAFKA_PASSWORD"
echo "  "
echo "           üìù Log Type                    : $LOG_TYPE"
echo "           üìÖ Log Date Format             : $(date $DATE_FORMAT) ($DATE_FORMAT)"
echo "  "
echo "           üîê Event Manager WebHook       : $NETCOOL_WEBHOOK_GENERIC"
echo "           üîê Event Manager Password      : $NOI_PASSWORD"
echo "  "
echo "           üìÇ Directory for Logs          : $WORKING_DIR_LOGS"
echo "           üìÇ Directory for Events        : $WORKING_DIR_EVENTS"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "  üóÑÔ∏è  Files to be loaded for Log Anomalies"
echo "***************************************************************************************************************************************************"
ls -1 $WORKING_DIR_LOGS | grep "json"
echo "  "
echo "  "
echo "***************************************************************************************************************************************************"
echo "  üóÑÔ∏è  Files to be loaded for Events"
echo "***************************************************************************************************************************************************"
ls -1 $WORKING_DIR_EVENTS | grep "json"
echo "  "
echo "  "
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"

echo ""
echo ""



  read -p " ‚ùó‚ùì Start Incident? [y,N] " DO_COMM
  if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
      echo "   ‚úÖ Ok, continuing..."
      echo ""
      echo ""
      echo ""
      echo ""

  else
    echo "‚ùå Aborted"
    exit 1
  fi


#--------------------------------------------------------------------------------------------------------------------------------------------
#  Launch Log Injection as a parallel thread
#--------------------------------------------------------------------------------------------------------------------------------------------
echo "--------------------------------------------------------------------------------------------------------------------------------"
echo " üöÄ  Launching Log Anomaly Injection" 
echo "--------------------------------------------------------------------------------------------------------------------------------"

for actFile in $(ls -1 $WORKING_DIR_LOGS | grep "json"); 
do 

#--------------------------------------------------------------------------------------------------------------------------------------------
#  Prepare the Log Data
#--------------------------------------------------------------------------------------------------------------------------------------------

      echo "***************************************************************************************************************************************************"
      echo "  üõ†Ô∏è  Preparing Data for file $actFile"
      echo "***************************************************************************************************************************************************"


      #--------------------------------------------------------------------------------------------------------------------------------------------
      #  Create file and structure in /tmp
      #--------------------------------------------------------------------------------------------------------------------------------------------
      mkdir /tmp/training-logs/  >$log_output_path 2>&1  || true
      rm /tmp/training-logs/x* >$log_output_path 2>&1  || true
      cp $WORKING_DIR_LOGS/$actFile /tmp/training-logs/
      cd /tmp/training-logs/


      #--------------------------------------------------------------------------------------------------------------------------------------------
      #  Update Timestamps
      #--------------------------------------------------------------------------------------------------------------------------------------------
      echo "    üî® Updating Timestamps (this can take several minutes)"
      echo "" > /tmp/timestampedErrorLogs.json
      while IFS= read -r line
      do
            # Get timestamp in ELK format
            export my_timestamp=$(date $DATE_FORMAT)
            # Replace in line
            line=${line/MY_TIMESTAMP/$my_timestamp}
            # Write line to temp file
            echo $line >> /tmp/timestampedErrorLogs.json
      done < "$actFile"
      echo "      ‚úÖ OK"

      #--------------------------------------------------------------------------------------------------------------------------------------------
      #  Split the files in 1500 line chunks for kafkacat
      #--------------------------------------------------------------------------------------------------------------------------------------------
      echo "    üî® Splitting"
      split -l 1500 /tmp/timestampedErrorLogs.json
      export NUM_FILES=$(ls | wc -l)
      rm $actFile
      rm /tmp/timestampedErrorLogs.json
      cd -  >$log_output_path 2>&1  || true
      echo "      ‚úÖ OK"



      #--------------------------------------------------------------------------------------------------------------------------------------------
      #  Get the cert for kafkacat
      #--------------------------------------------------------------------------------------------------------------------------------------------
      oc project $WAIOPS_NAMESPACE >$log_output_path 2>&1  || true

      echo "***************************************************************************************************************************************************"
      echo "ü•á Getting Certs"
      echo "***************************************************************************************************************************************************"
      oc extract secret/strimzi-cluster-cluster-ca-cert -n $WAIOPS_NAMESPACE --keys=ca.crt >$log_output_path 2>&1  || true
      echo "      ‚úÖ OK"



      #--------------------------------------------------------------------------------------------------------------------------------------------
      #  Inject the logs
      #--------------------------------------------------------------------------------------------------------------------------------------------
      echo "***************************************************************************************************************************************************"
      echo "üåè  Injecting Logs from File: ${actFile}" 
      echo "     Quit with Ctrl-Z"
      echo "***************************************************************************************************************************************************"
      ACT_COUNT=0
      for FILE in /tmp/training-logs/*; do 
          if [[ $FILE =~ "x"  ]]; then
              ACT_COUNT=`expr $ACT_COUNT + 1`
              echo "Injecting file ($ACT_COUNT/$(($NUM_FILES-1))) - $FILE"
              ${KAFKACAT_EXE} -v -X security.protocol=SSL -X ssl.ca.location=./ca.crt -X sasl.mechanisms=SCRAM-SHA-512  -X sasl.username=token -X sasl.password=$KAFKA_PASSWORD -b $KAFKA_BROKER -P -t $LOGS_TOPIC -l $FILE   >$log_output_path 2>&1  || true
              echo "      ‚úÖ OK"
          fi
      done
done


echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Outage Simulation for $APP_NAME"
echo " ‚úÖ  Done..... "
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"


