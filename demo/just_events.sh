#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT MODIFY BELOW
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
source ./00_config-secrets.sh

export APP_NAME=robot-shop
export LOG_TYPE=humio   # humio, elk, splunk, ...
export log_output_path=/dev/null 2>&1


echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Simulate Outage for $APP_NAME"
echo ""
echo "***************************************************************************************************************************************************"

#--------------------------------------------------------------------------------------------------------------------------------------------
#  Check Defaults
#--------------------------------------------------------------------------------------------------------------------------------------------

if [[ $APP_NAME == "" ]] ;
then
      echo "‚ö†Ô∏è AppName not defined. Launching this script directly?"
      echo "   Falling back to $DEFAULT_APP_NAME"
      export APP_NAME=$DEFAULT_APP_NAME
fi

if [[ $LOG_TYPE == "" ]] ;
then
      echo "‚ö†Ô∏è Log Type not defined. Launching this script directly?"
      echo "   Falling back to $DEFAULT_LOG_TYPE"
      export LOG_TYPE=$DEFAULT_LOG_TYPE
fi


#--------------------------------------------------------------------------------------------------------------------------------------------
#  Get Credentials
#--------------------------------------------------------------------------------------------------------------------------------------------

echo "***************************************************************************************************************************************************"
echo "  üîê  Getting credentials"
echo "***************************************************************************************************************************************************"
oc project $WAIOPS_NAMESPACE >$log_output_path 2>&1  || true

export NOI_PASSWORD=$(oc get secrets | grep omni-secret | awk '{print $1;}' | xargs oc get secret -o jsonpath --template '{.data.OMNIBUS_ROOT_PASSWORD}' | base64 --decode)

export WORKING_DIR_LOGS="./demo/INCIDENT_FILES/$APP_NAME/logs"
export WORKING_DIR_EVENTS="./demo/INCIDENT_FILES/$APP_NAME/events"

case $LOG_TYPE in
  elk) export DATE_FORMAT="+%Y-%m-%dT%H:%M:%S.000Z";;
  humio) export DATE_FORMAT="+%s000";;
  *) export DATE_FORMAT="+%s000";;
esac

echo "      ‚úÖ OK"
echo ""
echo ""



#--------------------------------------------------------------------------------------------------------------------------------------------
#  Check Credentials
#--------------------------------------------------------------------------------------------------------------------------------------------

echo "***************************************************************************************************************************************************"
echo "  üîó  Checking credentials"
echo "***************************************************************************************************************************************************"


if [[ $NETCOOL_WEBHOOK_GENERIC == "not_configured" ]] || [[ $NETCOOL_WEBHOOK_GENERIC == "" ]];
then
      echo "‚ùå Event Manager Webhook not configured. Aborting..."
      exit 1
else
      echo "      ‚úÖ OK - Event Manager Webhook"
fi

if [[ $NOI_PASSWORD == "" ]] ;
then
      echo "‚ùå Cannot contact Event Manager"
      echo "‚ùå Make sure that Event Manager is running. Aborting..."
      exit 1
else
      echo "      ‚úÖ OK - Event Manager Password"
fi
echo ""
echo ""
echo ""
echo ""


echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "  "
echo "  üîé  Parameter for Incident Simulation for $APP_NAME"
echo "  "
echo "           üîê Event Manager WebHook       : $NETCOOL_WEBHOOK_GENERIC"
echo "           üîê Event Manager Password      : $NOI_PASSWORD"
echo "  "
echo "           üìÇ Directory for Events        : $WORKING_DIR_EVENTS"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "  üóÑÔ∏è  Files to be loaded for Events"
echo "***************************************************************************************************************************************************"
ls -1 $WORKING_DIR_EVENTS | grep "json"
echo "  "
echo "  "
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"

echo ""
echo ""



  read -p " ‚ùó‚ùì Start Incident? [y,N] " DO_COMM
  if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
      echo "   ‚úÖ Ok, continuing..."
      echo ""
      echo ""
      echo ""
      echo ""

  else
    echo "‚ùå Aborted"
    exit 1
  fi



#--------------------------------------------------------------------------------------------------------------------------------------------
#  Deleting Event Manager Events
#--------------------------------------------------------------------------------------------------------------------------------------------

echo "--------------------------------------------------------------------------------------------------------------------------------"
echo " üßª  Deleting Event Manager Events for $APP_NAME" 
echo "--------------------------------------------------------------------------------------------------------------------------------"
oc get pods | grep ncoprimary-0 | awk '{print $1;}' | xargs -I{} oc exec {} -- bash -c "/opt/IBM/tivoli/netcool/omnibus/bin/nco_sql -server AGG_P -user root -passwd ${NOI_PASSWORD} << EOF
delete from alerts.status where AlertGroup='$APP_NAME';
go
exit
EOF"

#--------------------------------------------------------------------------------------------------------------------------------------------
#  Start creating Events
#--------------------------------------------------------------------------------------------------------------------------------------------

for actFile in $(ls -1 $WORKING_DIR_EVENTS | grep "json"); 
do 


    echo "--------------------------------------------------------------------------------------------------------------------------------"
    echo " üåè  Injecting Events from File: ${actFile}" 
    echo "--------------------------------------------------------------------------------------------------------------------------------"

  
    while IFS= read -r line
    do
      export my_timestamp=$(date +%s)000

      echo "Injecting Event at: $my_timestamp"
      line=${line/MY_TIMESTAMP/$my_timestamp}

      curl --insecure -X "POST" "$NETCOOL_WEBHOOK_GENERIC" \
        -H 'Content-Type: application/json; charset=utf-8' \
        -H 'Cookie: d291eb4934d76f7f45764b830cdb2d63=90c3dffd13019b5bae8fd5a840216896' \
        -d $"${line}">$log_output_path 2>&1
      echo "      ‚úÖ OK"
    done < "$WORKING_DIR_EVENTS/$actFile"


done

echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Outage Simulation for $APP_NAME"
echo " ‚úÖ  Done..... "
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"


